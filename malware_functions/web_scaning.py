# import asyncio
# import time
#
# from selenium.webdriver import Chrome
# from selenium.webdriver.chrome.service import Service as ChromeService
# from selenium.webdriver.chrome.options import Options as ChromeOptions
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.chrome.webdriver import WebDriver as AsyncioDriver
#
#
# async def web_analyzer(hash):
#     options = ChromeOptions()
#     options.add_argument('--headless')
#     options.add_argument("start-min")
#     options.add_experimental_option("excludeSwitches", ["enable-automation"])
#     options.add_experimental_option('useAutomationExtension', False)
#     options.add_argument("--disable-blink-features=AutomationControlled")
#     service = ChromeService(
#         executable_path=r'C:\Users\Gehat\YandexDisk\Компьютер HOME-PC\PycharmProjects\tele_bot\chromedriver.exe')
#     options.add_argument(
#         'user-agent=Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.75 Safari/537.36')
#
#     driver = AsyncioDriver(options=options,
#                            service=service)
#     driver.get(f"https://metadefender.opswat.com/results/file/{hash}/hash/overview")
#     try:
#         WebDriverWait(driver, 6).until(EC.presence_of_element_located((By.CLASS_NAME, 'resultsHeaderCritical')))
#         page_source = driver.find_element(By.CLASS_NAME, 'resultsHeaderCritical').text
#         driver.quit()
#
#     except:
#         page_source='None'
#     finally:
#         return page_source
#
#
#
# async def main():
#     hashs = [
#         '04e09a2d4b77ece6e0e178d5cf8d1665048b834f481c66a3960d82d0eef51fea',
#         'e16f3d3f8ebd25e52486771c6b662f6469e4c518290b9fe88b7c22d051c6ca8a',
#         '5974a6fcf0503f34709dbcc572d30d76ab64f655444ae83f088ec975ab26cb7d',
#         '4295d0526c43cd959a1393fe02dab3f0fc1b16af06754b2ca5930e12161e3f45'
#     ]
#     tasks = []
#     for hash in hashs:
#         task = asyncio.create_task(web_analyzer(hash))
#         tasks.append(task)
#     pages = await asyncio.gather(*tasks)
#
#     print(pages)
#
#
# if __name__ == '__main__':
#     asyncio.run(main())
from PyQt5.QtWidgets import QApplication, QWidget, QListWidget, QListWidgetItem, QPushButton, QInputDialog
import os


from PyQt5.QtWidgets import QApplication, QWidget, QListWidget, QListWidgetItem, QPushButton, QMenu, QAction
import os

class CustomWidgetItem(QWidget):
    def __init__(self, filename, filepath, list_widget, parent=None):
        super().__init__(parent)
        self.filename = filename
        self.filepath = filepath
        self.list_widget = list_widget
        self.initUI()

    class Example(QWidget):
        def __init__(self):
            super().__init__()

            self.initUI()

        def initUI(self):
            self.listwidget = QListWidget(self)
            self.listwidget.move(30, 30)
            self.listwidget.resize(400, 300)

            self.setGeometry(300, 300, 460, 400)
            self.show()

        def add_file_to_list(self, filepath):
            filename = os.path.basename(filepath)
            item = QListWidgetItem(self.listwidget)
            widget_item = CustomWidgetItem(filename, filepath, item, self.listwidget)
            item.setSizeHint(widget_item.sizeHint())
            self.listwidget.addItem(item)
            self.listwidget.setItemWidget(item, widget_item)

        def scan_files(self, directory):
            virus_files = []
            for root, dirs, files in os.walk(directory):
                for file in files:
                    filepath = os.path.join(root, file)
                    virus_files.append(filepath)
            return virus_files

        def show_virus_files(self, directory):
            virus_files = self.scan_files(directory)
            for file in virus_files:
                self.add_file_to_list(file)

    if __name__ == '__main__':
        import sys

        app = QApplication(sys.argv)
        ex = Example()
        ex.show_virus_files('C:\\Users\\Gehat\\Desktop')
        sys.exit(app.exec_())

