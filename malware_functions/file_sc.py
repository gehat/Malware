import logging
import os
import shutil
import time
from os import walk, remove
import mmap
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from malware_functions.connection_info import connection_pool

logging.basicConfig(filename='log_file.log', level=logging.INFO)


def find_hash_in_database(hash_value, connection):
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM malw WHERE virus_256=%s", [str(hash_value), ])
            result = cursor.fetchone()
        return result
    except Exception as e:
        logging.error(f"Error while querying the database: {e}")
        return None


def file_open(address):
    try:
        with open(f'{address[0]}\\{address[1]}', "rb") as f, mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_READ) as mm:
            hash_object = hashes.Hash(hashes.SHA256(), backend=default_backend())
            hash_object.update(mm)
        return hash_object.finalize().hex()
    except (PermissionError, FileNotFoundError, OSError) as e:
        logging.error(f"Error while opening file {address}: {e}")
        return None


def process_file(file_name):
    connection = connection_pool.getconn()
    hash_value = None
    result = None
    try:
        hash_value = file_open(file_name)
        if hash_value:
            result = find_hash_in_database(hash_value, connection)
    except Exception as e:
        logging.error(f"Error mmap file {hash_value}: {e}")
    finally:
        connection_pool.putconn(connection)
    return result


def scanning(name_disk):
    for root, dirs, files in walk(f"{name_disk}\\"):
        for file in files:
            yield root, file


def unbackdelete(file):
    print(file)
    with open(file, 'wb') as binary:
        binary.close()
    remove(file)


def unbackdelete_folder(folder):
    three = walk(f'{folder}\\')
    files = []
    for i in three:
        if len(i[2]) != 0:
            for file in i[2]:
                files.append(file)
                with open(file, 'wb') as binary:
                    binary.close()
    shutil.rmtree(folder)
    return files
